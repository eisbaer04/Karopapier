{% extends 'base.html.twig' %}

{% block headjavascripts %}
    <script src="/js/libs/underscore-1.8.3.js"></script>
    <script src="/js/libs/backbone-1.3.3.js"></script>
    <script src="/js/libs/backbone.radio-2.0.0.js"></script>
    <script src="/js/libs/backbone.marionette-3.4.3.js"></script>
{% endblock %}

{% block body %}
    <style type="text/css">
        .clickable: {
            cursor: pointer;
        }

        .selected {
            font-weight: bold;
            background-image: url(/images/unterstrich.png);
            background-repeat: no-repeat;
            background-position: 0 15px;
            width: 100px;
        }

        #messaging {
            display: flex;
        }

        .contact-list {
            width: 200px;
        }

        .message-wrapper {
            flex: 2;
            max-width: 480px;
        }

        .message-list {

        }

        .send-view {

        }

        .date-separator {
            text-align: center;
        }

        .message-rx {
            margin-right: 15px;
        }

        .message-tx {
            text-align: right;
            margin-left: 15px;
        }
    </style>
    <h1 class="karoborder">Zettel schreiben</h1>
    <p>Hier kannst Du Deinen Mitspielern einen Zettel schicken, den dann hoffentlich die Sitznachbarn weitergeben ohne reinzuschauen.</p>
    <div id="messaging">Loading...</div>
{% endblock %}

{% block javascripts %}
    <script type="text/template" id="send-template">
        An
        <span class="userDropdown"></span>: <input type="text">
        <button>Send</button>
    </script>

    <script type="text/template" id="contact-template">
        <%= login %>
    </script>

    <script type="text/template" id="messaging-template">
        <div class="contact-list"></div>
        <div class="message-wrapper">
            <div class="message-list"></div>
            <div class="send-view"></div>
        </div>
    </script>

    <script type="text/template" id="message-template">
        <% if (dateSeparator) { %>
        <div class="date-separator">---------------- <%= formatTsIsoDate(ts) %> ----------------</div><% } %>
        <div class="message-<%= rxtx %>">
            <b><% if (rxtx=="rx") { %><%= contact_name %><% } else { %><%= user_name %><% } %></b> (<%= formatTs(ts) %>): <%- text %>
        </div>
    </script>

    <script type="text/javascript">

        var UserCollection = Backbone.Collection.extend({
            url: "/api/users"
        });

        var Message = Backbone.Model.extend({
            defaults: {
                dateSeparator: false
            }
        });

        var MessageCollection = Backbone.Collection.extend({
            model: Message,
            comparator: "ts",
            url: "/api/messages"
        });

        window.USERS = new UserCollection(
                {{ users|json_encode|raw }}
        );

        var Contact = Backbone.Model.extend({
            defaults: {
                selected: false
            }
        });

        var ContactCollection = Backbone.Collection.extend({
            model: Contact,
            url: "/api/contacts"
        });

        var Message = Backbone.Model.extend();

        var SendView = Marionette.View.extend({
            events: {
                "click button": "send"
            },
            template: "#send-template",
            regions: {
                "users": '.userDropdown'
            },
            onRender: function() {
                this.getRegion("users").show(new UserDropdownView({
                    viewComparator: 'login',
                    model: this.model,
                    collection: USERS
                }));
            },

            send: function() {
                var text = this.$('input').val();
                var userId = this.$('select').val();
                console.info("Nachricht", text, "an", userId);
                this.trigger("send", {
                    userId: userId,
                    text: text
                });
            }
        });

        var UserOptionView = Marionette.View.extend({
            tagName: "option",
            template: _.template("<%= login %>"),
            attributes: function() {
                var attr = {
                    value: this.model.get("id")
                };
                if (this.options.selected.get("id") == this.model.get("id")) {
                    attr["selected"] = "selected";
                }
                return attr;
            }
        });

        var UserDropdownView = Marionette.CollectionView.extend({
            tagName: "select",
            childView: UserOptionView,
            childViewOptions: function() {
                return {
                    selected: this.model
                }
            }
        });

        var MessagingLayout = Marionette.View.extend({
            template: "#messaging-template",
            regions: {
                send: ".send-view",
                messages: ".message-list",
                contacts: ".contact-list"
            }
        });

        var MessageView = Marionette.View.extend({
            template: "#message-template",
            templateContext: {
                formatTsIsoDate: function(ts) {
                    var dat = new Date(ts * 1000);
                    var y = dat.getFullYear();
                    var m = dat.getMonth() + 1;
                    var d = dat.getDate();
                    if (m < 10) m = "0" + m;
                    if (d < 10) d = "0" + d;
                    return y + "-" + m + "-" + d;
                },
                formatTs: function(ts) {
                    var d = new Date(ts * 1000);
                    var m = d.getMinutes();
                    if (m < 10) m = "0" + m;
                    return d.getHours() + ":" + m;
                }
            }
        });
        var MessagesView = Marionette.CollectionView.extend({

            childView: function(child) {
                return MessageView;
            },
            childViewOptions: function(model, index) {
                // do some calculations based on the model
                return {
                    childIndex: "index"
                }
            }
        });

        var ContactView = Marionette.View.extend({
            className: "clickable",
            template: "#contact-template",
            triggers: {
                "click": "contact:select"
            },
            initialize: function() {
                var me = this;
                this.listenTo(this.model, "change:selected", this.render);
            },
            onRender: function() {
                if (this.model.get("selected")) {
                    this.$el.addClass("selected");
                } else {
                    this.$el.removeClass("selected");
                }
            }
        });

        var ContactsView = Marionette.CollectionView.extend({
            childView: ContactView
        });

        var MessagingRouter = Backbone.Router.extend({
            initialize: function(options) {
                this.app = options.app;
            },
            routes: {
                "zettel/:contact": "select",
                "zettel": "index"
            },
            index: function() {

            },
            select: function(contactName) {
                this.app.selectName(contactName);
            }
        });

        var MessagingApp = Marionette.Application.extend({
            initialize: function() {
                this.contacts = new ContactCollection();

                this.messages = new MessageCollection();
                this.userMessages = new MessageCollection();
                this.listenTo(this.messages, "add", function(m) {
                    this.userMessages.add(m);
                });

                this.messagingLayout = new MessagingLayout({
                    el: '#messaging'
                });
            },

            start: function() {
                console.info("Start App");
                var me = this;
                this.messagingLayout.render();

                this.contactsView = new ContactsView({
                    collection: this.contacts
                });

                this.messagingLayout.getRegion("contacts").show(this.contactsView);

                this.listenTo(this.contactsView, "childview:contact:select", function(e, v) {
                    var contact = e.model;
                    me.select(contact);
                });

                this.router = new MessagingRouter({
                    app: this
                });
                Backbone.history.start({pushState: true});
            },

            selectName: function(contactName) {
                console.info("Select", contactName);
                var c = this.contacts.findWhere({
                    "login": contactName
                });
                if (!c) {
                    console.warn("Not a contact");
                    return false;
                }

                this.select(c);
            },

            select: function(contact) {
                var me = this;
                this.contacts.each(function(c) {
                    c.set("selected", contact.get("id") === c.get("id"))
                });
                var messages = this.messages.where({
                    contact_id: contact.get("id")
                });
                var prevDate = "";
                messages.forEach(function(m) {
                    var d = new Date(m.get("ts") * 1000);
                    var dat = "" + d.getDate() + d.getMonth();
                    if (dat != prevDate) {
                        m.set("dateSeparator", true);
                        prevDate = dat;
                    }
                });
                this.userMessages.reset(messages);
                this.messagingLayout.getRegion("messages").show(new MessagesView({
                    collection: this.userMessages
                }));
                this.sendView = new SendView({
                    model: contact
                });
                this.messagingLayout.getRegion("send").show(this.sendView);
                this.listenTo(this.sendView, "send", function(data) {
                    me.messages.create(data, {wait: true});
                });
                Backbone.history.navigate("zettel/" + contact.get("login"));
            }
        });

        $(document).ready(function() {
            window.app = new MessagingApp();

            $.when(app.contacts.fetch(), app.messages.fetch()).done(function() {
                app.start();
            });
        });

    </script>
{% endblock %}
