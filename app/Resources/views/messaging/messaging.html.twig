{% extends 'base.html.twig' %}

{% block headjavascripts %}
    <script src="/js/libs/underscore-1.8.3.js"></script>
    <script src="/js/libs/backbone-1.3.3.js"></script>
    <script src="/js/libs/backbone.radio-2.0.0.js"></script>
    <script src="/js/libs/backbone.marionette-3.4.3.js"></script>
{% endblock %}

{% block body %}
    <style type="text/css">
        .selected {
            background-color: red;
        }

        .message-rx {
        }
    </style>
    <h1 class="karoborder">Zettel schreiben</h1>
    <p>Hier kannst Du Deinen Mitspielern einen Zettel schicken, den dann hoffentlich die Sitznachbarn weitergeben ohne reinzuschauen.</p>
    <div id="content">Lala</div>
{% endblock %}

{% block javascripts %}
    <script type="text/template" id="send-template">
        An
        <span class="userDropdown"></span>: <input type="text">
        <button>Send</button>
    </script>

    <script type="text/template" id="contact-template">
        <%= login %>
    </script>

    <script type="text/template" id="messaging-template">
        <div class="contact-list"></div>
        <div class="message-list"></div>
        <div class="send-view"></div>
    </script>

    <script type="text/template" id="message-template">
        <%= formatTs(ts) %>: <%= contact_name %>: <%- text %> <%= rxtx %>
    </script>

    <script type="text/javascript">

        var UserCollection = Backbone.Collection.extend({
            url: "/api/users"
        });

        var MessageCollection = Backbone.Collection.extend({
            comparator: "ts",
            url: "/api/messages"
        });

        window.USERS = new UserCollection(
                {{ users|json_encode|raw }}
        );

        var Contact = Backbone.Model.extend({
            defaults: {
                selected: false
            }
        });

        var ContactCollection = Backbone.Collection.extend({
            model: Contact,
            url: "/api/contacts"
        });

        var Message = Backbone.Model.extend();

        var SendView = Marionette.View.extend({
            events: {
                "click button": "send"
            },
            template: "#send-template",
            regions: {
                "users": '.userDropdown'
            },
            onRender: function() {
                this.getRegion("users").show(new UserDropdownView({
                    model: this.model,
                    collection: USERS
                }));
            },

            send: function() {
                var text = this.$('input').val();
                var userId = this.$('select').val();
                console.log("Nachricht", text, "an", userId);
                this.trigger("send", {
                    userId: userId,
                    text: text
                });
            }
        });

        var UserDropdownView = Marionette.View.extend({
            tagName: "select",
            template: false,
            onRender: function() {
                var me = this;
                var html = '';
                this.collection.each(function(m) {
                    if (m.get("id") == me.model.get("id")) {
                        html += '<option value="' + m.get("id") + '" selected="selected">' + m.get("login") + '</option>';
                    } else {
                        html += '<option value="' + m.get("id") + '">' + m.get("login") + '</option>';
                    }
                });
                this.$el.html(html);
            }
        });

        var MessagingLayout = Marionette.View.extend({
            template: "#messaging-template",
            regions: {
                send: ".send-view",
                messages: ".message-list",
                contacts: ".contact-list"
            }
        });

        var MessageView = Marionette.View.extend({
            template: "#message-template",
            templateContext: {
                formatTs: function(ts) {
                    var d = new Date(ts * 1000);
                    return d.toLocaleDateString() + " " + d.toLocaleTimeString();
                }
            }
        });
        var MessagesView = Marionette.CollectionView.extend({
            childView: MessageView
        });

        var ContactView = Marionette.View.extend({
            template: "#contact-template",
            triggers: {
                "click": "contact:select"
            },
            initialize: function() {
                var me = this;
                this.listenTo(this.model, "change:selected", this.render);
            },
            onRender: function() {
                if (this.model.get("selected")) {
                    this.$el.addClass("selected");
                } else {
                    this.$el.removeClass("selected");
                }
            }
        });

        var ContactsView = Marionette.CollectionView.extend({
            childView: ContactView
        });

        var MessagingRouter = Backbone.Router.extend({
            initialize: function(options) {
                this.app = options.app;
            },
            routes: {
                "zettel/:contact": "select",
                "zettel": "index"
            },
            index: function() {

            },
            select: function(contactName) {
                this.app.selectName(contactName);
            }
        });

        var MessagingApp = Marionette.Application.extend({
            initialize: function() {
                this.contacts = new ContactCollection();
                //this.contacts.fetch();

                this.messages = new MessageCollection();
                //this.messages.fetch();

                this.messagingLayout = new MessagingLayout({
                    el: '#content'
                });
            },

            start: function() {
                console.log("Start App");
                var me = this;
                this.messagingLayout.render();

                this.contactsView = new ContactsView({
                    collection: this.contacts
                });

                this.messagingLayout.getRegion("contacts").show(this.contactsView);

                this.listenTo(this.contactsView, "childview:contact:select", function(e, v) {
                    var contact = e.model;
                    me.select(contact);
                });

                this.router = new MessagingRouter({
                    app: this
                });
                Backbone.history.start({pushState: true});
            },

            selectName: function(contactName) {
                console.log("Select", contactName);
                var c = this.contacts.findWhere({
                    "login": contactName
                });
                if (!c) {
                    console.warn("Not a contact");
                    return false;
                }

                this.select(c);
            },

            select: function(contact) {
                var me = this;
                this.contacts.each(function(c) {
                    c.set("selected", contact.get("id") === c.get("id"))
                });
                var userMessages = new MessageCollection(this.messages.where({
                    contact_id: contact.get("id")
                }));
                this.messagingLayout.getRegion("messages").show(new MessagesView({
                    collection: userMessages
                }));
                this.sendView = new SendView({
                    model: contact
                });
                this.messagingLayout.getRegion("send").show(this.sendView);
                this.listenTo(this.sendView, "send", function(data) {
                    me.messages.create(data, {wait: true});
                });
                Backbone.history.navigate("zettel/" + contact.get("login"));
            }
        });

        $(document).ready(function() {
            window.app = new MessagingApp();

            $.when(app.contacts.fetch(), app.messages.fetch()).done(function() {
                app.start();
            });
        });

    </script>
{% endblock %}
